Install additional dependencies:
In the Shell, run:
Copynpm install @radix-ui/react-label @radix-ui/react-slot class-variance-authority clsx tailwindcss-animate lucide-react openai

Set up Tailwind CSS:
Copynpm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

Configure Tailwind CSS:
Update tailwind.config.js with the content provided in my earlier message.
Update the main CSS file:
Rename src/App.css to src/index.css and replace its content with the CSS provided earlier for globals.css.
Update src/main.jsx:
jsxCopyimport React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

Create UI components:
Create a src/components/ui folder and add the button.jsx, input.jsx, label.jsx, and card.jsx files with the content provided earlier.
Create a utils file:
Create src/lib/utils.js with the content provided earlier.
Create the FairytalePage component:
Create src/components/FairytalePage.jsx with the provided code.
Update src/App.jsx:
jsxCopyimport FairytalePage from './components/FairytalePage'

function App() {
  return <FairytalePage />
}

export default App

Set up the API:
With VITE, we can't use Next.js API routes. Instead, we'll use a separate server file. Create server.js in the root directory:
javascriptCopyconst express = require('express');
const { Configuration, OpenAIApi } = require('openai');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

app.post('/api/generate-fairytale', async (req, res) => {
  const { name, age, theme, bookType } = req.body;

  try {
    const completion = await openai.createCompletion({
      model: "text-davinci-002",
      prompt: `Generate a short ${bookType} fairytale for a ${age}-year-old named ${name} with a ${theme} theme:`,
      max_tokens: 200,
      temperature: 0.7,
    });

    res.json({ fairytale: completion.data.choices[0].text.trim() });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error generating fairytale' });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

Install server dependencies:
Copynpm install express cors dotenv

Update package.json:
Add a script to run both the VITE dev server and the Express server:
jsonCopy"scripts": {
  "dev": "vite",
  "build": "vite build",
  "lint": "eslint src --ext js,jsx --report-unused-disable-directives --max-warnings 0",
  "preview": "vite preview",
  "server": "node server.js",
  "start": "concurrently \"npm run dev\" \"npm run server\""
}

Install concurrently:
Copynpm install -D concurrently

Update the handleSubmit function in FairytalePage.jsx:
javascriptCopyconst handleSubmit = async (e) => {
  e.preventDefault();
  setIsLoading(true);
  try {
    const response = await fetch('http://localhost:3001/api/generate-fairytale', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, age, theme, bookType }),
    });
    const data = await response.json();
    setFairytale(data.fairytale);
  } catch (error) {
    console.error('Error:', error);
  }
  setIsLoading(false);
};

Set up environment variables:
Create a .env file in the root directory and add your OpenAI API key:
CopyOPENAI_API_KEY=your_api_key_here


To run the project, use the command npm start. This will start both the VITE dev server for the frontend and the Express server for the backend.