import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { BookOpen, Wand2, Palette, Send, Crown, Rocket, Waves, Leaf } from 'lucide-react'

export default function FairytalePage() {
  const [name, setName] = useState('')
  const [age, setAge] = useState('')
  const [theme, setTheme] = useState('')
  const [bookType, setBookType] = useState('pictured')
  const [loading, setLoading] = useState(false)
  const [story, setStory] = useState(null)
  const [error, setError] = useState(null)
  const [showPrompts, setShowPrompts] = useState(false)
  const [prompts, setPrompts] = useState({ storyPrompt: '' })
  const [currentStage, setCurrentStage] = useState(0)

  // ... (keep other parts of your component like themes, bookTypes, etc.)

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError(null)
    setStory(null)

    try {
      const response = await fetch('/api/initialize-story', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ childName: name, childAge: age, childInterests: theme, bookType }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.details || 'Failed to generate story')
      }

      const data = await response.json()
      setStory({
        title: data.title,
        content: data.content,
        choices: data.choices,
      })
      setCurrentStage(1)
      fetchPrompts()
    } catch (error) {
      console.error('Error generating story:', error)
      setError(error.message || 'An error occurred while generating the story. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const handleContinueStory = async (choice) => {
    setLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/continue-story', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ choice }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.details || 'Failed to continue story')
      }

      const data = await response.json()
      setStory(prevStory => ({
        ...prevStory,
        content: prevStory.content + '\n\n' + choice + '\n\n' + data.content,
        choices: null, // No more choices after the second part
      }))
      setCurrentStage(2)
      fetchPrompts()
    } catch (error) {
      console.error('Error continuing story:', error)
      setError(error.message || 'An error occurred while continuing the story. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  // ... (keep fetchPrompts and other utility functions)

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-100 to-pink-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl mx-auto">
        <Card className="shadow-xl bg-white">
          <CardHeader>
            <CardTitle className="text-2xl font-bold text-center text-purple-800">Magical Fairytale Generator</CardTitle>
            <CardDescription className="text-center text-purple-600">Create your personalized fairytale adventure</CardDescription>
          </CardHeader>
          <CardContent>
            {!story && (
              // ... (keep your existing form for initial story generation)
            )}
            {error && (
              // ... (keep your existing error display)
            )}
            {story && (
              <div className="mt-6">
                <h3 className="text-xl font-semibold text-purple-800">{story.title}</h3>
                <p className="mt-2 text-gray-700 whitespace-pre-wrap">{story.content}</p>
                <div className="mt-4 text-purple-800 font-semibold">
                  Stage: {currentStage} / 2
                </div>
                {story.choices && currentStage === 1 && (
                  <div className="mt-4">
                    <h4 className="font-semibold text-purple-800">What happens next?</h4>
                    <div className="grid grid-cols-1 gap-2 mt-2">
                      <Button
                        onClick={() => handleContinueStory(story.choices.A)}
                        className="bg-purple-500 hover:bg-purple-600 text-white"
                        disabled={loading}
                      >
                        {story.choices.A}
                      </Button>
                      <Button
                        onClick={() => handleContinueStory(story.choices.B)}
                        className="bg-purple-500 hover:bg-purple-600 text-white"
                        disabled={loading}
                      >
                        {story.choices.B}
                      </Button>
                    </div>
                  </div>
                )}
                {currentStage === 2 && (
                  <div className="mt-4 text-green-600 font-semibold">
                    Story Complete!
                  </div>
                )}
                {/* ... (keep your existing code for showing prompts) */}
              </div>
            )}
          </CardContent>
        </Card>

        {/* ... (keep your existing "How It Works" section) */}
      </div>
    </div>
  )
}